[tox]
minversion = 1.6
skipsdist = True
envlist = py27,py34,functional,py34-functional,pep8

[testenv]
deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt
install_command = pip install -U {opts} {packages}
usedevelop = True
setenv = VIRTUAL_ENV={envdir}
         OS_TEST_PATH=panko/tests/unit
passenv = OS_TEST_TIMEOUT OS_STDOUT_CAPTURE OS_STDERR_CAPTURE OS_LOG_CAPTURE
commands =
   {toxinidir}/tools/pretty_tox.sh "{posargs}"
   oslo-config-generator --config-file=etc/panko/panko-config-generator.conf
whitelist_externals = bash

[testenv:py-mongodb]
setenv = OS_TEST_PATH=panko/tests/functional/
commands = pifpaf run mongodb {toxinidir}/tools/pretty_tox.sh "{posargs}"

[testenv:py-mysql]
setenv = OS_TEST_PATH=panko/tests/functional/
commands = pifpaf run mysql {toxinidir}/tools/pretty_tox.sh "{posargs}"

[testenv:py-pgsql]
setenv = OS_TEST_PATH=panko/tests/functional/
commands = pifpaf run postgresql {toxinidir}/tools/pretty_tox.sh "{posargs}"

# Functional tests for elastic search
[testenv:py-elastic]
setenv = OS_TEST_PATH=panko/tests/functional/
commands = pifpaf run elasticsearch {toxinidir}/tools/pretty_tox.sh "{posargs}"

[testenv:functional]
setenv = VIRTUAL_ENV={envdir}
         OS_TEST_PATH=panko/tests/functional/
passenv = PANKO_*
commands =
   bash -x {toxinidir}/run-functional-tests.sh "{posargs}"

[testenv:py34-functional]
setenv = VIRTUAL_ENV={envdir}
         OS_TEST_PATH=panko/tests/functional/
basepython = python3.4
passenv = PANKO_*
commands =
   bash -x {toxinidir}/run-functional-tests.sh "{posargs}"

# NOTE(chdent): The gabbi tests are also run under the other functional
# tox targets. This target simply provides a target to directly run just
# gabbi tests without needing to do discovery across the entire body of
# tests.
[testenv:gabbi]
setenv = OS_TEST_PATH=panko/tests/functional/gabbi
passenv = PANKO_*
commands = pifpaf run mongodb {toxinidir}/tools/pretty_tox.sh "{posargs}"

[testenv:cover]
setenv = OS_TEST_PATH=panko/tests
commands =
   python setup.py testr --slowest --coverage --testr-args="{posargs}"

[testenv:pep8]
deps = hacking<0.11,>=0.10.0
commands =
    flake8
    # Check that .po and .pot files are valid:
    bash -c "find panko -type f -regex '.*\.pot?' -print0|xargs -0 -n 1 msgfmt --check-format -o /dev/null"

[testenv:releasenotes]
commands = sphinx-build -a -E -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:genconfig]
commands = oslo-config-generator --config-file=etc/panko/panko-config-generator.conf

[testenv:docs]
commands = python setup.py build_sphinx
setenv = PYTHONHASHSEED=0

[testenv:venv]
commands = {posargs}
setenv = PYTHONHASHSEED=0

[testenv:debug]
commands = bash -x oslo_debug_helper {posargs}

[testenv:debug-mongodb]
setenv = OS_TEST_PATH=panko/tests/functional
commands = pifpaf --debug run mongodb oslo_debug_helper {posargs}

[testenv:debug-mysql]
setenv = OS_TEST_PATH=panko/tests/functional
commands = pifpaf --debug run mysql oslo_debug_helper {posargs}

[testenv:debug-pgsql]
setenv = OS_TEST_PATH=panko/tests/functional
commands = pifpaf --debug run postgresql oslo_debug_helper {posargs}

[testenv:debug-elastic]
setenv = OS_TEST_PATH=panko/tests/functional
commands = pifpaf --debug run elasticsearch oslo_debug_helper {posargs}

[flake8]
ignore =
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build
show-source = True

[hacking]
import_exceptions =
    panko.i18n
local-check-factory = panko.hacking.checks.factory
